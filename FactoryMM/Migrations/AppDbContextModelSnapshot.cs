// <auto-generated />
using System;
using FactoryMM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FactoryMM.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FactoryMM.Models.CompanyPurchaseMm.CompanyPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MatInvId");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseId");

                    b.ToTable("CompanyPurchases");
                });

            modelBuilder.Entity("FactoryMM.Models.CustomersOrderMm.CustomerOrder", b =>
                {
                    b.Property<int>("CustOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustId");

                    b.Property<DateTime>("DeliveryTakeDate");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("ProdInvId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CustOrderId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("FactoryMM.Models.CustommerMm.Customer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email");

                    b.Property<string>("OrgName");

                    b.Property<int>("Phone");

                    b.HasKey("CustId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FactoryMM.Models.EmployeeMm.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FactoryMM.Models.EmployeeMm.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("BloodGroup");

                    b.Property<int>("EmpCatId");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Increament");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<int>("Phone");

                    b.Property<string>("PhotoPath");

                    b.HasKey("EmpId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmpId = 1,
                            Address = "House#45, Road#12, Sector#10, Uttara Dhaka 1230",
                            BloodGroup = 0,
                            EmpCatId = 0,
                            EmpName = "Rahim",
                            Increament = 0,
                            JoiningDate = new DateTime(2019, 8, 22, 23, 32, 22, 73, DateTimeKind.Local).AddTicks(5061),
                            Phone = 1755566621
                        },
                        new
                        {
                            EmpId = 2,
                            Address = "House#45, Road#12, Sector#10, Uttara Dhaka 1230",
                            BloodGroup = 4,
                            EmpCatId = 0,
                            EmpName = "Rahima",
                            Increament = 0,
                            JoiningDate = new DateTime(2019, 8, 22, 23, 32, 22, 74, DateTimeKind.Local).AddTicks(5665),
                            Phone = 1755566621
                        });
                });

            modelBuilder.Entity("FactoryMM.Models.EmployeeMm.EmployeeCategoryMm.EmployeeCategory", b =>
                {
                    b.Property<int>("EmpCatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmpCatName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("EmpCatId");

                    b.ToTable("EmployeeCategorys");
                });

            modelBuilder.Entity("FactoryMM.Models.InventoryMm.MaterialInventoryMm.MaterialInventory", b =>
                {
                    b.Property<int>("MatInvId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("MatInvName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MatInvId");

                    b.ToTable("MaterialInventorys");
                });

            modelBuilder.Entity("FactoryMM.Models.InventoryMm.ProductInventoryMm.ProductInventory", b =>
                {
                    b.Property<int>("ProdInvId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("ProdInvName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProdInvId");

                    b.ToTable("ProductsInventorys");
                });

            modelBuilder.Entity("FactoryMM.Models.ProductionMM.Production", b =>
                {
                    b.Property<int>("ProductionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("HDPE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LDPE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProdHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProdInvId");

                    b.Property<decimal>("ProdQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("T2OB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("T2OR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("T2OY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Thinner")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Wastage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductionId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("FactoryMM.Models.ReturnSels.ReturnSelse", b =>
                {
                    b.Property<int>("SaleReturnId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustId");

                    b.Property<DateTime>("ErturnDate");

                    b.Property<int>("ProdInvId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleReturnId");

                    b.ToTable("ReturnSelses");
                });

            modelBuilder.Entity("FactoryMM.Models.SalesMm.Sales", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustOrderId");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<decimal>("Due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmpId");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleId");

                    b.ToTable("Saleses");
                });

            modelBuilder.Entity("FactoryMM.Models.SupplierMm.Supplier", b =>
                {
                    b.Property<int>("SupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("OrgName");

                    b.Property<int>("Phone");

                    b.Property<string>("SupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SupId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FactoryMM.Models.EmployeeMm.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FactoryMM.Models.EmployeeMm.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FactoryMM.Models.EmployeeMm.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FactoryMM.Models.EmployeeMm.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
